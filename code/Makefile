# Alternative GNU Make workspace makefile autogenerated by Premake

ifndef config
  config=debug_x64
endif

ifndef verbose
  SILENT = @
endif

ifeq ($(config),debug_x64)
  x_stb_config = debug_x64
  x_glad_config = debug_x64
  x_glfw_config = debug_x64
  x_catch2_config = debug_x64
  x_benchmark_config = debug_x64
  main_config = debug_x64
  draw2d_config = debug_x64
  support_config = debug_x64
  vmlib_config = debug_x64
  lines_sandbox_config = debug_x64
  lines_test_config = debug_x64
  triangles_sandbox_config = debug_x64
  triangles_test_config = debug_x64
  blit_benchmark_config = debug_x64
  lines_benchmark_config = debug_x64

else ifeq ($(config),release_x64)
  x_stb_config = release_x64
  x_glad_config = release_x64
  x_glfw_config = release_x64
  x_catch2_config = release_x64
  x_benchmark_config = release_x64
  main_config = release_x64
  draw2d_config = release_x64
  support_config = release_x64
  vmlib_config = release_x64
  lines_sandbox_config = release_x64
  lines_test_config = release_x64
  triangles_sandbox_config = release_x64
  triangles_test_config = release_x64
  blit_benchmark_config = release_x64
  lines_benchmark_config = release_x64

else
  $(error "invalid configuration $(config)")
endif

PROJECTS := x-stb x-glad x-glfw x-catch2 x-benchmark main draw2d support vmlib lines-sandbox lines-test triangles-sandbox triangles-test blit-benchmark lines-benchmark

.PHONY: all clean help $(PROJECTS) 

all: $(PROJECTS)

x-stb:
ifneq (,$(x_stb_config))
	@echo "==== Building x-stb ($(x_stb_config)) ===="
	@${MAKE} --no-print-directory -C third_party -f x-stb.make config=$(x_stb_config)
endif

x-glad:
ifneq (,$(x_glad_config))
	@echo "==== Building x-glad ($(x_glad_config)) ===="
	@${MAKE} --no-print-directory -C third_party -f x-glad.make config=$(x_glad_config)
endif

x-glfw:
ifneq (,$(x_glfw_config))
	@echo "==== Building x-glfw ($(x_glfw_config)) ===="
	@${MAKE} --no-print-directory -C third_party -f x-glfw.make config=$(x_glfw_config)
endif

x-catch2:
ifneq (,$(x_catch2_config))
	@echo "==== Building x-catch2 ($(x_catch2_config)) ===="
	@${MAKE} --no-print-directory -C third_party -f x-catch2.make config=$(x_catch2_config)
endif

x-benchmark:
ifneq (,$(x_benchmark_config))
	@echo "==== Building x-benchmark ($(x_benchmark_config)) ===="
	@${MAKE} --no-print-directory -C third_party -f x-benchmark.make config=$(x_benchmark_config)
endif

main: vmlib support draw2d x-stb x-glad x-glfw
ifneq (,$(main_config))
	@echo "==== Building main ($(main_config)) ===="
	@${MAKE} --no-print-directory -C main -f Makefile config=$(main_config)
endif

draw2d:
ifneq (,$(draw2d_config))
	@echo "==== Building draw2d ($(draw2d_config)) ===="
	@${MAKE} --no-print-directory -C draw2d -f Makefile config=$(draw2d_config)
endif

support:
ifneq (,$(support_config))
	@echo "==== Building support ($(support_config)) ===="
	@${MAKE} --no-print-directory -C support -f Makefile config=$(support_config)
endif

vmlib:
ifneq (,$(vmlib_config))
	@echo "==== Building vmlib ($(vmlib_config)) ===="
	@${MAKE} --no-print-directory -C vmlib -f Makefile config=$(vmlib_config)
endif

lines-sandbox: vmlib support draw2d x-glad x-glfw
ifneq (,$(lines_sandbox_config))
	@echo "==== Building lines-sandbox ($(lines_sandbox_config)) ===="
	@${MAKE} --no-print-directory -C lines-sandbox -f Makefile config=$(lines_sandbox_config)
endif

lines-test: vmlib draw2d x-catch2
ifneq (,$(lines_test_config))
	@echo "==== Building lines-test ($(lines_test_config)) ===="
	@${MAKE} --no-print-directory -C lines-test -f Makefile config=$(lines_test_config)
endif

triangles-sandbox: vmlib support draw2d x-glad x-glfw
ifneq (,$(triangles_sandbox_config))
	@echo "==== Building triangles-sandbox ($(triangles_sandbox_config)) ===="
	@${MAKE} --no-print-directory -C triangles-sandbox -f Makefile config=$(triangles_sandbox_config)
endif

triangles-test: vmlib draw2d x-catch2
ifneq (,$(triangles_test_config))
	@echo "==== Building triangles-test ($(triangles_test_config)) ===="
	@${MAKE} --no-print-directory -C triangles-test -f Makefile config=$(triangles_test_config)
endif

blit-benchmark: vmlib draw2d support x-stb x-benchmark
ifneq (,$(blit_benchmark_config))
	@echo "==== Building blit-benchmark ($(blit_benchmark_config)) ===="
	@${MAKE} --no-print-directory -C blit-benchmark -f Makefile config=$(blit_benchmark_config)
endif

lines-benchmark: vmlib draw2d x-benchmark
ifneq (,$(lines_benchmark_config))
	@echo "==== Building lines-benchmark ($(lines_benchmark_config)) ===="
	@${MAKE} --no-print-directory -C lines-benchmark -f Makefile config=$(lines_benchmark_config)
endif

clean:
	@${MAKE} --no-print-directory -C third_party -f x-stb.make clean
	@${MAKE} --no-print-directory -C third_party -f x-glad.make clean
	@${MAKE} --no-print-directory -C third_party -f x-glfw.make clean
	@${MAKE} --no-print-directory -C third_party -f x-catch2.make clean
	@${MAKE} --no-print-directory -C third_party -f x-benchmark.make clean
	@${MAKE} --no-print-directory -C main -f Makefile clean
	@${MAKE} --no-print-directory -C draw2d -f Makefile clean
	@${MAKE} --no-print-directory -C support -f Makefile clean
	@${MAKE} --no-print-directory -C vmlib -f Makefile clean
	@${MAKE} --no-print-directory -C lines-sandbox -f Makefile clean
	@${MAKE} --no-print-directory -C lines-test -f Makefile clean
	@${MAKE} --no-print-directory -C triangles-sandbox -f Makefile clean
	@${MAKE} --no-print-directory -C triangles-test -f Makefile clean
	@${MAKE} --no-print-directory -C blit-benchmark -f Makefile clean
	@${MAKE} --no-print-directory -C lines-benchmark -f Makefile clean

help:
	@echo "Usage: make [config=name] [target]"
	@echo ""
	@echo "CONFIGURATIONS:"
	@echo "  debug_x64"
	@echo "  release_x64"
	@echo ""
	@echo "TARGETS:"
	@echo "   all (default)"
	@echo "   clean"
	@echo "   x-stb"
	@echo "   x-glad"
	@echo "   x-glfw"
	@echo "   x-catch2"
	@echo "   x-benchmark"
	@echo "   main"
	@echo "   draw2d"
	@echo "   support"
	@echo "   vmlib"
	@echo "   lines-sandbox"
	@echo "   lines-test"
	@echo "   triangles-sandbox"
	@echo "   triangles-test"
	@echo "   blit-benchmark"
	@echo "   lines-benchmark"
	@echo ""
	@echo "For more information, see https://github.com/premake/premake-core/wiki"